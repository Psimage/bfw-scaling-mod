[+units]
	[unit_type]
		id=dummy_unit_lvl_1
		[base_unit]
			id=dummy_unit
		[/base_unit]
		advances_to=dummy_unit_lvl_2
		hitpoints=100
		experience=100
	[/unit_type]
	[unit_type]
		id=dummy_unit_lvl_2
		[base_unit]
			id=dummy_unit
		[/base_unit]
		level=2
		hitpoints=200
		advances_to=null
		[attack]
			name=pike
			description="pike"
			type=pierce
			range=melee
			damage=10
			number=5
		[/attack]
		[attack]
			name=bow
			description="bow"
			type=pierce
			range=ranged
			damage=10
			number=10
		[/attack]
		[advancement]
			description=_"Max HP bonus +3, Max XP +20%"
			id="amla_default"
			max_times=100
			strict_amla=yes
			[effect]
				apply_to="hitpoints"
				heal_full=yes
				increase_total=3
			[/effect]
			[effect]
				apply_to="max_experience"
				increase="20%"
			[/effect]
			[effect]
				apply_to="status"
				remove="poisoned"
			[/effect]
			[effect]
				apply_to="status"
				remove="slowed"
			[/effect]
		[/advancement]
	[/unit_type]
[/units]

{MY_UNIT_TEST "test_unit_scaled_on_advancement" (
	{PRESTART_WITH_UNIT "dummy_unit_lvl_1" "test_unit" ()}

	[lua]
		code = <<
			local function advance_unit(unit)
				unit.experience = unit.max_experience
				unit:advance()
			end

			on_event("start", function(ctx)
				local u = wesnoth.get_unit("test_unit")
				advance_unit(u)

				test.assert(u.hitpoints == 400)
				for i,a in ipairs(u.attacks) do
					if a.name == "pike" then
						test.assert(a.number == 10)
					end
					if a.name == "bow" then
						test.assert(a.number == 20)
					end
				end

				-- AMLA advancement
				advance_unit(u)
				test.assert(u.hitpoints == 406)
				for i,a in ipairs(u.attacks) do
					if a.name == "pike" then
						test.assert(a.number == 10)
					end
					if a.name == "bow" then
						test.assert(a.number == 20)
					end
				end

				-- another AMLA advancement
				advance_unit(u)
				test.assert(u.hitpoints == 412)

				test.success()
			end)
		>>
	[/lua]
)}
