#define DUMMY_TYPE ID ABILITIES_CONTENT
	[unit_type]
		id={ID}
		[base_unit]
			id=dummy_unit
		[/base_unit]
		[abilities]
			{ABILITIES_CONTENT}
		[/abilities]
	[/unit_type]
#enddef

[+units]
	{DUMMY_TYPE dummy_unit_heals ({ABILITY_HEALS})}
	{DUMMY_TYPE dummy_unit_cures ({ABILITY_CURES})}
	{DUMMY_TYPE dummy_unit_regenerates ({ABILITY_REGENERATES})}
	{DUMMY_TYPE dummy_unit_feeding ({ABILITY_FEEDING})}
[/units]

{MY_UNIT_TEST "test_unit_abilities_scaled" (
	{PRESTART_WITH_UNIT "dummy_unit_heals" "test_unit_heals" ()}
	{PRESTART_WITH_UNIT "dummy_unit_cures" "test_unit_cures" ()}
	{PRESTART_WITH_UNIT "dummy_unit_regenerates" "test_unit_regenerates" ()}
	{PRESTART_WITH_UNIT "dummy_unit_feeding" "test_unit_feeding" ()}

	{PRESTART_WITH_UNIT "dummy_unit" "test_unit_feeder" ()}

	[lua]
		code = <<
			local function get_unit_ability(uid, aid)
				for i,ability_tagset in ipairs(wml.get_child(wesnoth.get_unit(uid).__cfg, "abilities")) do
					if ability_tagset[2].id == aid then
						return ability_tagset[2]
					end
				end
			end
			
			local function get_unit_feeding_object_effect(uid)
				for i,mod_tagset in ipairs(wml.get_child(wesnoth.get_unit(uid).__cfg, "modifications")) do
					if mod_tagset[1] == "object" and mod_tagset[2].feeding then
						return mod_tagset[2][1][2] -- [object][effect][/effect][/object]
					end
				end
			end

			on_event("start", function(ctx)
				test.assert(get_unit_ability("test_unit_heals", "healing").value == 8)
				test.assert(get_unit_ability("test_unit_cures", "healing").value == 16)
				test.assert(get_unit_ability("test_unit_regenerates", "regenerates").value == 16)

				wesnoth.wml_actions.kill({id="test_unit_feeder", fire_event=true, 
					wml.tag.secondary_unit {id="test_unit_feeding"}})

				-- test.assert(get_unit_feeding_object_effect("test_unit_feeding").increase_total == 2)
				test.assert(wesnoth.get_unit("test_unit_feeding").hitpoints == 202)

				test.success()
			end)
		>>
	[/lua]
)}
